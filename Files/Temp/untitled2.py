# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10jPr6Fj9dHaQswwMpbmScCk_CfiXgrD1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

sleep = pd.read_csv("/content/Sleep_Efficiency.csv")

sleep.info()

sleep.head()

sleep.isnull().sum()



for col in sleep.columns:
  if sleep[col].dtype=='object':
    sleep[col]=sleep[col].fillna(sleep[col].mode()[0])
  else:
    sleep[col]=sleep[col].fillna(sleep[col].mean())

sleep.isnull().sum()

sleep.describe()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
for col in sleep.columns:
  if sleep[col].dtype=='object':
   sleep[col]=le.fit_transform(sleep[col])


sleep.info()

for col in sleep.columns:
  sns.boxplot(sleep[col])
  print("")
  plt.show()

for col in sleep.columns:
  q1 = np.quantile(sleep[col], 0.25)
  q3 = np.quantile(sleep[col], 0.75)
  iqr=q3-q1
  lower_bound=q1-(1.5*iqr)
  upper_bound=q3+(1.5*iqr)
  sleep[col]=np.where(sleep[col]>upper_bound,upper_bound,sleep[col])
  sleep[col]=np.where(sleep[col]<lower_bound,lower_bound,sleep[col])
  sns.boxplot(sleep[col])
  print("")
  plt.show()

# from sklearn.preprocessing import StandardScaler
# sc=StandardScaler()
# for col in sleep.columns:
#     sleep[col]=sc.fit_transform(sleep[[col]])

# sleep.head()

sns.countplot(sleep)

sns.heatmap(sleep.corr(),annot=True)

x = sleep.drop(['Sleep efficiency','Wakeup time','Bedtime'],axis=1)
y = sleep["Sleep efficiency"]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
print(x_train.shape,x_test.shape)

x_train.head()

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train,y_train)

sleep.head()

lin_pred=lr.predict(x_test)

from sklearn.metrics import r2_score, mean_squared_error
lin_r2score=r2_score(y_test,lin_pred)
lin_mse=mean_squared_error(y_test,lin_pred)
print(lin_r2score)
print(lin_mse)

from sklearn.tree import DecisionTreeRegressor
dt = DecisionTreeRegressor()
dt.fit(x_train,y_train)
dt_pred = dt.predict(x_test)

dt_r2score = r2_score(y_test,dt_pred)
dt_mse = mean_squared_error(y_test,dt_pred)
print(dt_r2score)
print(dt_mse)

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(x_train,y_train)
rf_pred = rf.predict(x_test)

rf_r2score = r2_score(y_test,rf_pred)
rf_mse = mean_squared_error(y_test, rf_pred)
print(rf_r2score)
print(rf_mse)

from sklearn.model_selection import RandomizedSearchCV

sleep.head()

print(rf.predict([[1.0,	65.0,	0.0,	6.0, 18.0,70.000,	12.0,	0.0,	0.0,	0.0,	1.0,	3.0]]))

import pickle
model = pickle.dump(rf,open('model.pkl','wb'))